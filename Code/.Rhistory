fit_training_data(9))
plot_grid(fit_testing_data(1),
fit_testing_data(2),
fit_testing_data(3),
fit_testing_data(7))
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(5),
fit_training_data(7),
fit_training_data(9))
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(5),
fit_training_data(7),
fit_training_data(9))
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(5),
fit_training_data(7))
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(5),
fit_training_data(9))
#----
set.seed(123)
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(5),
fit_training_data(9))
fit_training_data(9)
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(4),
fit_training_data(5),
fit_training_data(6),
fit_training_data(7),
fit_training_data(8),
fit_training_data(9))
fit_training_data <- function(degree){
return(
ggplot(training_data, aes(x, y)) +
xlim(-1,1) +
ylim(-3,3)
geom_point() +
stat_function(fun = function(x)(x^3), color='pink', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA) +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
fit_training_data <- function(degree){
return(
ggplot(training_data, aes(x, y)) +
xlim(-1,1) +
ylim(-3,3) +
geom_point() +
stat_function(fun = function(x)(x^3), color='pink', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA) +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(4),
fit_training_data(5),
fit_training_data(6),
fit_training_data(7),
fit_training_data(8),
fit_training_data(9))
return(
ggplot(training_data, aes(x, y)) +
xlim(-1,1) +
ylim(-3,3) +
geom_point() +
stat_function(fun = function(x)(x^3), color='pink', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T) +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
fit_training_data <- function(degree){
return(
ggplot(training_data, aes(x, y)) +
xlim(-1,1) +
ylim(-3,3) +
geom_point() +
stat_function(fun = function(x)(x^3), color='pink', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T) +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(4),
fit_training_data(5),
fit_training_data(6),
fit_training_data(7),
fit_training_data(8),
fit_training_data(9))
fit_training_data <- function(degree){
return(
ggplot(training_data, aes(x, y)) +
xlim(-1,1) +
geom_point() +
stat_function(fun = function(x)(x^3), color='pink', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T) +
ylim(-3,3) +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(4),
fit_training_data(5),
fit_training_data(6),
fit_training_data(7),
fit_training_data(8),
fit_training_data(9))
fit_training_data <- function(degree){
return(
ggplot(training_data, aes(x, y)) +
xlim(-1,1) +
geom_point() +
stat_function(fun = function(x)(x^3), color='pink', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T) +
coord_cartesian(ylim = c(-3,3)) +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(4),
fit_training_data(5),
fit_training_data(6),
fit_training_data(7),
fit_training_data(8),
fit_training_data(9))
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='pink', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='lilac') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_testing_data(1),
fit_testing_data(2),
fit_testing_data(3),
fit_testing_data(7))
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='magenta', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='lilac') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_testing_data(1),
fit_testing_data(2),
fit_testing_data(3),
fit_testing_data(7))
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='magenta', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='dodgerblue') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_testing_data(1),
fit_testing_data(2),
fit_testing_data(3),
fit_testing_data(7))
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='darkslateblue', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_testing_data(1),
fit_testing_data(2),
fit_testing_data(3),
fit_testing_data(7))
fit_training_data <- function(degree){
return(
ggplot(training_data, aes(x, y)) +
coord_cartesian(xlim=c(-1,1),ylim = c(-3,3)) +
geom_point() +
stat_function(fun = function(x)(x^3), color='navy', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
coord_cartesian(cxlim=(-1,1),ylim = c(-3,3)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='navy', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
fit_training_data <- function(degree){
return(
ggplot(training_data, aes(x, y)) +
coord_cartesian(xlim=c(-1,1),ylim = c(-3,3)) +
geom_point() +
stat_function(fun = function(x)(x^3), color='navy', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
coord_cartesian(cxlim=(-1,1),ylim = c(-3,3)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='navy', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
coord_cartesian(xlim=c(-1,1),ylim = c(-3,3)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='navy', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(4),
fit_training_data(5),
fit_training_data(6),
fit_training_data(7),
fit_training_data(8),
fit_training_data(9))
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
xlim(-1,1) +
coord_cartesian(ylim = c(-3,3)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='navy', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_testing_data(1),
fit_testing_data(2),
fit_testing_data(3),
fit_testing_data(7))
fit_training_data <- function(degree){
return(
ggplot(training_data, aes(x, y)) +
xlim(-1,1) +
coord_cartesian(ylim = c(-3,3)) +
geom_point() +
stat_function(fun = function(x)(x^3), color='navy', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
fit_testing_data <- function(degree){
return(
ggplot(data=training_data,aes(x, y)) +
xlim(-1,1) +
coord_cartesian(ylim = c(-3,3)) +
geom_point(data=testing_data,aes(x,y)) +
stat_function(fun = function(x)(x^3), color='navy', lwd=1) +
stat_smooth(method='lm', formula=y~poly(x,degree), fill=NA, fullrange=T,color='goldenrod') +
annotate('text',-0.8, Inf, label = paste0('degree = ',degree), hjust=0, vjust=2)
)
}
plot_grid(fit_training_data(1),
fit_training_data(2),
fit_training_data(3),
fit_training_data(4),
fit_training_data(5),
fit_training_data(6),
fit_training_data(7),
fit_training_data(8),
fit_training_data(9))
plot_grid(fit_testing_data(1),
fit_testing_data(2),
fit_testing_data(3),
fit_testing_data(7))
A <- matrix(c(1,2,3))
A <- matrix(c(1,2,3),c(4,5,6))
A <- matrix(c(2,-2,2,0,
-2,20,10,6,
2,10,10,4,
0,6,4,2))
A <- matrix(c(2,-2,2,0,
-2,20,10,6,
2,10,10,4,
0,6,4,2),nrow=4)
View(A)
solve(1)
solve(1.5)
solve(A)
x1 <- c(1,2,3)
x2 <- c(1,-1,0)
y <- c(0,3,1)
lm(y~x1+x2)
l <- lm(y~x1+x2)
predict.lm(y~x1+x2)
tib <- tibble(x1=x1,x2=x2)
bigx <- tibble(x1=x1,x2=x2,x3=x3)
x2 <- c(1,-1)
x3 <- c(2,0)
y <- c(0,3)
bigx <- tibble(x1=x1,x2=x2,x3=x3)
View(pred)
x1 <- c(1,2)
x2 <- c(1,-1)
x3 <- c(2,0)
y <- c(0,3)
bigx <- tibble(x1=x1,x2=x2,x3=x3)
l <- lm(y~x1+x2+x3)
x1 <- c(1,2,3)
x2 <- c(1,-1,3)
x3 <- c(2,0,-1)
y <- c(0,3,1)
bigx <- tibble(x1=x1,x2=x2,x3=x3)
l <- lm(y~x1+x2+x3)
library(tidyverse)
getwd()
read_tsv('~/Documents/PhD/SM1')
read_tsv('~/Documents/PhD/SM1/data.tsv')
install.packages("rstan")
library(rhdf5)
library(bioconductor)
library(BiocManager)
library(rhdf5)
BiocManager::install("rhdf5")
update.packages()
path <- "~/Documents/PhD/mini_project/box/Analysis of Oligionucleotide MS data - code/harrydata/temp_output"
path <- "~/Documents/PhD/mini_project/box/Analysis of Oligionucleotide MS data - code/harrydata/temp_output/Heated 2.4 prep 1.mat"
rhdf5::h5read(path)
path <- "/home/vb21939/Documents/PhD/mini_project/box/Analysis of Oligionucleotide MS data - code/temp_output"
rhdf5::h5read(path)
install.packages("hdf5r")
library(hdf5r)
path <- "/home/vb21939/Documents/PhD/mini_project/box/Analysis of Oligionucleotide MS data - code/temp_output/Heated 24 prep 1.mat"
hdf5r::H5File(path)
hdf5r::h5file(path)
hdf5r::h5file(path)[2]
in <- hdf5r::h5file(path)
input <- hdf5r::h5file(path)
rhdf5::h5ls(path)
input <- hdf5r::h5file(path)
hdf5r::h5file(path)
rhdf5::h5read(path)
library(Biobase)
mzR
library(BiocManager)
library(BiocVersion)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mzR")
source("~/Documents/PhD/semester_2/grp_proj/zombie_project/Code/zombie_simulator.R", echo=TRUE)
source('zombie_simulator.R')
source('plotting_functions.R')
library(jcolors)
colours <- jcolors('pal3')
library(scales)
library(EasyABC)
library(abc)
source("~/Documents/PhD/semester_2/grp_proj/zombie_project/Code/plotting_functions.R", echo=TRUE)
source('zombie_simulator.R')
source('plotting_functions.R')
library(jcolors)
colours <- jcolors('pal3')
library(scales)
library(EasyABC)
library(abc)
true_params <- c(0.0001, 0.0001, 0.0095, 0.0005, 0.0001, 0.05)
true_epidemic <- simulate_zombies(true_params)
t <- seq(0, 25, 1)
par(mfrow=c(1,1))
plot(t, floor(true_epidemic[1:26]), ylim=c(0,500), type='l', col=colours[2], lwd=2,
xlab='Time', ylab='Population Values', main='Zombie apocalypse with chosen parameters')
lines(t, floor(true_epidemic[27:52]), col=colours[3], lwd=2)
legend('topright', legend=c('Susceptibles', 'Zombies'), col = colours[2:3], lty=1, lwd=2)
Rcpp::sourceCpp("Documents/PhD/semester_2/grp_proj/zombie_project/Code/zomsim.cpp")
Rcpp::sourceCpp('zomsim.cpp')
source('zombie_simulator.R')
source('plotting_functions.R')
library(jcolors)
colours <- jcolors('pal3')
library(scales)
library(EasyABC)
library(abc)
setwd("/home/vb21939/Documents/PhD/semester_2/grp_proj/zombie_project/Code")
Rcpp::sourceCpp('zomsim.cpp')
source('zombie_simulator.R')
source('plotting_functions.R')
library(jcolors)
colours <- jcolors('pal3')
library(scales)
library(EasyABC)
library(abc)
## Simulate 'true' epidemic data
true_params <- c(0.0001, 0.0001, 0.0095, 0.0005, 0.0001, 0.05)
true_epidemic <- simulate_zombies(true_params)
t <- seq(0, 25, 1)
par(mfrow=c(1,1))
plot(t, floor(true_epidemic[1:26]), ylim=c(0,500), type='l', col=colours[2], lwd=2,
xlab='Time', ylab='Population Values', main='Zombie apocalypse with chosen parameters')
lines(t, floor(true_epidemic[27:52]), col=colours[3], lwd=2)
legend('topright', legend=c('Susceptibles', 'Zombies'), col = colours[2:3], lty=1, lwd=2)
# define prior distribution
priors <- list(c('unif', 0, 0.001), c('unif', 0, 0.001), c('unif', 0, 0.1),
c('unif', 0, 0.001), c('unif', 0, 0.001), c('unif', 0, 0.1))
n <- 10000 # number of simulations to be performed
p <- 0.005  #proportion of simulations to be retained
# run ABC rejection algorithm
ABC_rej <- ABC_rejection(model = simulate_zombies, prior=priors, nb_simul=n,
summary_stat_target = true_epidemic, tol=p, progress_bar=TRUE)
set.seed(1)
ABC_rej_parallel <- ABC_rejection(model = simulate_zombies_seed, prior=priors, nb_simul=n,
summary_stat_target = true_epidemic, tol=p, progress_bar=TRUE,
n_cluster = 4, use_seed = TRUE)
ABC_rej_parallel$computime
# algorithm run-time
ABC_rej$computime
# 11.262
# plot posterior distributions
histogram_plot(ABC_rej$param, 'Posterior distributions from Rejection ABC')
# Take the 25 best simulations
dist <- sqrt(apply((ABC_rej$stats- true_epidemic)^2, 1, sum))
idx <-sort(dist, index.return=TRUE)$ix
acc_params_rej <- ABC_rej$param[idx[1:25],]
# Plot accepted sampled trajectories
plot_trajectories(true_epidemic, t, acc_params_rej, title='Accepted simulations from rejection ABC algorithm')
# plot mean and 90% confidence bands
plot_conf_bands(true_epidemic, t, ABC_rej, title='Mean and confidence band from rejection ABC')
# plot mean +/- one standard deviation
plot_sd_bands(true_epidemic, t, ABC_rej, title='Mean and standard deviation from rejection ABC')
# use features of `abc` package
parnames <- c('delta', 'zeta', 'beta', 'alpha', 'pi', 'rho')
colnames(ABC_rej$param) <- parnames
abc_rej <- abc(true_epidemic, ABC_rej$param, ABC_rej$stats, tol=1, method="rejection")
# epsilon values for accepted simulations
max(abc_rej$dist)
#20.178
# ADDITIONS --
# -- REJECTION ABC w/ RCPP --
# run ABC rejection algorithm
ABC_rej_cpp <- ABC_rejection(model = simulate_zombies_rcpp, prior=priors, nb_simul=n,
summary_stat_target = true_epidemic, tol=p, progress_bar=TRUE)
set.seed(1)
ABC_rej_parallel_cpp <- ABC_rejection(model = simulate_zombies_seed_rcpp, prior=priors, nb_simul=n,
summary_stat_target = true_epidemic, tol=p, progress_bar=TRUE,
n_cluster = 4, use_seed = TRUE)
ABC_rej_cpp$computime
#sequence of tolerance levels:
tolerance <- c(10, 5, 1, 0.5)
#number of simulations to obtain below the tolerance level at each iteration:
n <- 50
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=simulate_zombies, prior=priors,
nb_simul=n, summary_stat_target=true_epidemic,
tolerance_tab=tolerance, progress_bar = TRUE, inside_prior = TRUE)
set.seed(1)
ABC_Beaumont_parallel <- ABC_sequential(method="Beaumont", model=simulate_zombies_seed, prior=priors,
nb_simul=n, summary_stat_target=true_epidemic,
tolerance_tab=tolerance, progress_bar = TRUE,
n_cluster = 4, use_seed = TRUE)
ABC_Beaumont$nsim # The number of model simulations performed.
# 4096
ABC_Beaumont$computime # The computing time to perform the simulations
# 2.8869
ABC_Beaumont$epsilon
# Take the 25 best simulations
dist <- sqrt(apply((ABC_Beaumont$stats- true_epidemic)^2, 1, sum))
idx <-sort(dist, index.return=TRUE)$ix
acc_params_beaumont <- ABC_Beaumont$param[idx[1:25],]
# plot posterior distributions
histogram_plot(ABC_Beaumont$param, 'Posterior distributions from PMC-ABC')
# Plot accepted sampled trajectories
plot_trajectories(true_epidemic, t, acc_params_beaumont, title='Accepted simulations from PMC-ABC algorithm')
# plot mean and 90% confidence bands
plot_conf_bands(true_epidemic, t, ABC_Beaumont, title='Mean and confidence band from PMC-ABC')
# plot mean +/- one standard deviation
plot_sd_bands(true_epidemic, t, ABC_Beaumont, title='Mean and standard deviation from PMC-ABC')
# ADDITIONS --
# -- REJECTION ABC w/ RCPP --
# run ABC rejection algorithm
ABC_Beaumont_cpp <- ABC_sequential(method="Beaumont", model = simulate_zombies_rcpp,
prior=priors, nb_simul=n,
summary_stat_target = true_epidemic,
tolerance_tab=tolerance, progress_bar=TRUE, inside_prior = TRUE)
ABC_Beaumont_cpp
